package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.

import (
	"context"
	"fmt"
	"log"

	"github.com/mtuomiko/packlister/graph/generated"
	"github.com/mtuomiko/packlister/graph/model"
)

func (r *mutationResolver) CreatePacklist(ctx context.Context, input model.NewPacklist) (*model.Packlist, error) {
	return r.DB.CreatePacklist(input)
}

func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented"))
}

func (r *packlistResolver) User(ctx context.Context, obj *model.Packlist) (*model.User, error) {
	log.Printf("resolving user inside packlist. UserID: %s", obj.UserID)
	return r.DB.FindOneUser(obj.UserID)
}

func (r *queryResolver) AllPacklists(ctx context.Context) ([]*model.Packlist, error) {
	return r.DB.GetAllPacklists()
}

func (r *queryResolver) FindPacklist(ctx context.Context, id string) (*model.Packlist, error) {
	return r.DB.FindOnePacklist(id)
}

func (r *queryResolver) AllUsers(ctx context.Context) ([]*model.User, error) {
	return r.DB.GetAllUsers()
}

func (r *queryResolver) FindUser(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Packlist returns generated.PacklistResolver implementation.
func (r *Resolver) Packlist() generated.PacklistResolver { return &packlistResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type packlistResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
